openapi: 3.0.0
info:
  title: traQ-R API
  version: 0.0.1
servers:
  - url: https://q.trap.jp/api/1.0
paths:
  /channels:
    post:
      tags:
        - channel
      description: チャンネルを作成します。
      requestBody: 
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: チャンネル名
                  example: random
                parent:
                  type: integer
                  description: 親のチャンネルID
                  example: 1
      responses:
        "200":
          description: |+
            正常にチャンネルが作成できました。
            作成されたチャンネルのチャンネルオブジェクトを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Channel"
    get:
      tags:
        - channel
      description: |+
        (すべての)チャンネルのリストを取得します。
      responses:
        "200":
          description: |+
            正常に取得ができました。
            チャンネルオブジェクトの配列を返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelList"

  /channels/{channelId}:
    parameters:
      - $ref: "#/components/parameters/channelIdInPath"
    post:
      tags:
        - channel
      description: チャンネルにメッセージを投稿します。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  description: Markdown形式のメッセージ本文
                  example: Raskって誰？
      responses:
        "300": 
          description: |+ 
            投稿成功したときです。
            投稿されたメッセージのメッセージオブジェクトが返されます。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
    put: 
      tags:
        - channel
      description: チャンネル名を変更します。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: チャンネル名
                  example: gps
      responses:
        "200":
          description: |+
            正常に変更ができました。
            変更後のチャンネルオブジェクトを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Channel"
    get:
      tags:
        - channel
      description: 対象のチャンネルの詳細情報を返します。
      responses:
        "200":
          description: |+
            正常に取得ができました。
            チャンネル詳細オブジェクトを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelDetail"
    delete:
      tags:
        - channel
      description: チャンネルを削除します。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - confirm
              properties:
                confirm:
                  type: boolean
                  description: 削除してもいいか確認したか
              example: true
      responses:
        "204":
          description: 削除に成功しました。
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"

  /channels/{channelId}/topics:
    parameters:
      - $ref: "#/components/parameters/channelIdInPath"
    get: 
      tags:
        - topics
      description: チャンネルの説明を取得します。
      responses:
        "200":
          description: |+
            正常に取得ができました。
            チャンネルトピックオブジェクトを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelTopic"
    post: 
      tags:
        - topics
      description: チャンネルの説明を追加します。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  description: チャンネルの説明
                  example: なんでも良いチャンネルです。
      responses:
        "201":
          description: |+
            更新に成功しました。
            更新後のチャンネルトピックオブジェクトを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelTopic"
    put: 
      tags:
        - topics
      description: チャンネルの説明を変更します。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  description: チャンネルの説明
                  example: なんでも良いチャンネルです!!
      responses:
        "200":
          description: |+
            正常に更新できました。
            更新後のチャンネルトピックオブジェクトを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelTopic"

  /channels/{channelId}/messages:
    parameters:
      - $ref: "#/components/parameters/channelIdInPath"
    get: 
      tags:
        - message
      description: チャンネルに存在するメッセージを取得します。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                count:
                  description: 取得する件数 1-200
                  type: integer
                  example: 50
                offset:
                  description: 取得するメッセージのオフセット
                  type: integer
                  example: 150
      responses:
        "200":
          description: |+
            正常に取得ができました。
            メッセージオブジェクトの配列を返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageList"
              
  /channels/{channelId}/notifications:
    parameters:
      - $ref: "#/components/parameters/channelIdInPath"
    get:
      tags:
        - channel
      description: 全ユーザーの通知状況を取得します。
      responses: 
        "200":
          description: |+
            正常に取得できました。
            ユーザー通知状況オブジェクトの配列を返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotificationList"
    put: 
      tags:
        - channel
      description: チャンネルの通知状況を変更します。
      responses:
        "200":
          description: |+
            正常に更新できました。
            ユーザー通知状況オブジェクトの配列を返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotificationList"
        
  /users:
    get:
      tags:
        - user
      description: 全ユーザーリストを取得します
      responses:
        "200": 
          description: |+
            正常に取得できました。
            ユーザーリストを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserList"

  /users/me:
    get:
      tags:
        - me
      description: 自分のユーザー情報を取得します。
      responses:
        "200": 
          description: |+
            正常に取得できました。
            自分のユーザーオブジェクトを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    
  /users/me/clips:
    get:
      tags:
        - me
      description: クリップしたメッセージのリストを取得します。
      responses:
        "200":
          description: |+
            正常に取得できました。
            クリップしたメッセージのリストを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageList"
    post:
      tags:
        - me
      description: 新しくメッセージをクリップします。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                message_id:
                  type: integer
                  description: クリップするメッセージID
                  example: 114514
      responses:
        "200":
          description: |+ 
            正常にクリップできました。
            クリップしたメッセージのリストを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageList"        
    delete:
      tags:
        - me
      description: クリップを削除します。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                message_id:
                  type: integer
                  description: 削除するメッセージのID
                  example: 114514
      responses:
        "200":
          description: |+ 
            正常に削除できました。
            クリップしたメッセージのリストを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageList"
        "400":
          description: |+ 
            正常に削除できませんでした。
            指定されたメッセージは既にクリップされていません。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageList"
    
  /users/me/stars:
    get:
      tags:
        - channel
      description: お気に入りチャンネルリストを取得します。
      responses:
        "200":
          description: |+
            正常に取得できました。
            お気に入りチャンネルリストを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelList"
    post:
      tags:
        - channel
      description: お気に入りチャンネルリストにチャンネルを追加します。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                channel_id:
                  type: string
                  description: 追加するチャンネルのID
                  example: 25
      responses:
        "200":
          description: |+ 
            正常に追加できました。
            お気に入りチャンネルリストを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelList"

  /users/me/stars/{channelId}:
    parameters:
      - $ref: "#/components/parameters/channelIdInPath"
    delete:
      tags:
        - channel
      description: お気に入りチャンネルリストから削除します。
      responses:
        "200":
          description: |+ 
            正常に削除されました。
            お気に入りチャンネルリストを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelList"
        "404":
          description: |+ 
            正常に削除できませんでした。既に指定されたチャンネルはお気に入りチャンネルリストにありません。
            お気に入りチャンネルリストを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelList"
    
  /users/me/channels/visibility:
    get:
      tags:
        - channel
      description: チャンネル一覧の可視状態を取得します。
      responses:
        "200":
          description: |+
            正常に取得できました。
            チャンネルリストを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelList"
    put: 
      tags:
        - channel
      description: チャンネルの可視状態を変更します。
      requestBody:
        content:
          application/json:
            schema:
              type: array
              description: 可視にするチャンネルIDの配列
              items:
                type: integer
              example:
                - 12
                - 14
      responses:
        "200":
          description: |+
            正常に変更できました。
            チャンネルリストを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelList"
  
  /users/me/messages/unread:
    get:
      tags:
        - message
      description: 未読メッセージのリストを取得します。
      responses:
        "200":
          description: |+ 
            正常に取得できました。
            未読メッセージリストを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
    delete:
      tags:
        - message
      description: メッセージを既読にします。
      responses:
        "200":
          description: |+
            正常にメッセージを既読にできました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
    
  /users/{userId}:
    parameters:
      - $ref: "#/components/parameters/userIdInPath"
    get:
      tags:
        - user
      description: ユーザーの詳細を取得します。
      responses:
        "200":
          description: |+
            正常に取得できました。
            ユーザー情報を返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
    
  /users/{userId}/tags:
    parameters:
      - $ref: "#/components/parameters/userIdInPath"
    get:
      tags:
        - userTag
      description: ユーザーのタグのリストを取得します。
      responses:
        "200":
          description: |+
            正常に取得できました。
            タグのリストを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
    post:
      tags:
        - userTag
      description: ユーザーにタグを追加します。
      responses:
        "200":
          description: |+
            正常に追加できました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"

  /users/{userId}/tags/{tagId}:
    parameters:
      - $ref: "#/components/parameters/userIdInPath"
      - name: tagId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags:
        - userTag
      description: ユーザーから指定したタグを削除します。
      responses:
        "200":
          description: |+
            正常に削除できました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
    
  /stamps:
    get:
      tags: 
        - stamp
      description: 全スタンプのリストを取得します。
      responses:
        "200":
          description: |+
            正常に取得できました。
            スタンプのリストを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
    post:
      tags: 
        - stamp
      description: スタンプを新しく追加します。
      responses:
        "200":
          description: |+
            正常にスタンプが追加されました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
    
  /stamps/{stampId}:
    parameters:
      - $ref: "#/components/parameters/stampIdInPath"
    get:
      tags: 
        - stamp
      description: スタンプの詳細を取得します。
      responses:
        "200":
          description: |+
            正常に取得できました。
            スタンプの詳細を返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
    delete:
      description: スタンプを削除します。
      tags: 
        - stamp
      responses:
        "200":
          description: |+
            正常に削除できました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"

  /messages/{messageId}:
    parameters:
      - $ref: "#/components/parameters/messageIdInPath"
    put:
      tags:
        - message
      description: 指定したメッセージを編集します。
      operationId: editMessageById
      responses:
        "200":
          description: |+
            正常に編集できました。
            編集後のメッセージオブジェクトを返します。
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
    get:
      tags:
        - message
      description: 指定したメッセージを取得します。
      operationId: getMessageById
      responses:
        "200":
          description: |+
            正常に取得できました。
            メッセージオブジェクトを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
    delete: 
      tags:
        - message
      description: 指定したメッセージを削除します。
      responses:
        "204":
          description: |+
            正常に削除できました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
              
  /messages/{messageId}/stamps/{stampId}:
    parameters:
      - $ref: "#/components/parameters/messageIdInPath"
      - $ref: "#/components/parameters/stampIdInPath"
    post:
      tags:
        - stamp
      description: 指定したメッセージに指定したスタンプを押します。
      responses:
        "204":
          description: |+
            正常にスタンプを押すことができました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
    delete:
      tags:
        - stamp
      description: 指定したメッセージから指定したスタンプを外します。
      responses:
        "204":
          description: |+
            正常にスタンプを外すことができました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"

  /messages/{messageId}/fixation:
    parameters:
      - $ref: "#/components/parameters/messageIdInPath"
    put:
      tags:
        - message
      description: 指定したメッセージを固定します。
      responses:
        "200":
          description: |+
            正常にメッセージが固定できました。
            固定されたメッセージを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
    delete:
      tags:
        - message
      description: 指定したメッセージの固定を外します。
      responses:
        "200":
          description: |+
            正常にメッセージの固定を外すことができました。
            固定を外したメッセージを取得します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"

  /messages/search:
    get:
      tags:
        - search
      description: クエリによってメッセージを検索し、その結果を取得します。
      parameters:
        - name: query
          description: 検索のクエリ文字列
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: |+
            正常に検索できました。
            検索結果に含まれたメッセージを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageList"

  /heartbeat:
    get:
      tags:
        - heartbeat
      description: チャンネルを現在見ている人・編集している人を取得します。
      parameters:
        - name: channelId
          in: query
          description: 現在いるチャンネルId
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: |+
            正常に取得できました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HeartbeatRes"
    put:
      tags:
        - heartbeat
      description: どのチャンネルを見ているか・編集しているかを送信します。
      parameters:
      - name: userId
        in: query
        description: 自分のuserId
        required: true
        schema:
          type: integer
      - name: status
        in: query
        description: editing,monitoring,noneでユーザーの状態を指定する
        required: true
        schema:
          type: string
          enum:
            - none
            - monitoring
            - editing
      - name: channelId
        in: query
        description: 現在いるチャンネルId
        required: true
        schema:
          type: integer
      responses:
        "204":
          description: |+
            正常に送信できました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"

components:
  parameters:
    channelIdInPath:
      name: channelId
      description: 操作の対象となるチャンネルのID
      in: path
      required: true
      schema:
        type: integer
    userIdInPath:
      name: userId
      description: 操作の対象となるユーザーID
      in: path
      required: true
      schema:
        type: integer
    messageIdInPath:
      name: messageId
      in: path
      required: true
      description: 操作の対象となるメッセージID
      schema:
        type: integer
    stampIdInPath:
      name: stampId
      description: 操作の対象となるスタンプID
      in: path
      required: true
      schema:
        type: string
  schemas:
    Channel:
      type: object
      properties:
        channelId:
          type: integer
        name:
          type: string
        parent:
          type: integer
          description: 親の階層のチャンネルId
        children:
          type: array
          description: 子のチャンネルIdの配列
        visibility:
          type: boolean
          description: チャンネルの可視状態

    ChannelTopic:
      type: object
      properties:
        channelId:
          type: integer
        name:
          type: string
        text:
          type: string

    ChannelList:
      type: array
      items: 
        $ref: "#/components/schemas/Channel"

    User:
      type: object
      properties:
        userId:
          type: integer
        name:
          type: string

    UserDetail:
      type: object
      properties: 
        userId:
          type: integer
        name:
          type: string
        tagList:
          type: array
          items:
            type: string
        
    UserList:
      type: array
      items: 
        $ref: "#/components/schemas/User"

    Message:
      type: object
      properties:
        messageId:
          type: integer
        user:
          type: object
        parentChannelId:
          type: integer
        fixation:
          type: boolean
        content:
          type: string
        dateTime:
          type: string
          format: date-time
        stampList:
          type: array
          items:
            $ref: "#/components/schemas/Stamp"

    MessageList:
      type: array
      items:
        $ref: "#/components/schemas/Message"

    Stamp:
      type: object
      properties:
         stampId:
          type: integer
         count:
          type: integer
         url:
          type: string

    StampList:
      type: array
      items: 
        $ref: "#/components/schemas/Stamp"

    UserNotification:
      type: object
      properties: 
         userId:
          type: integer
         name:
          type: string
         notification:
          type: boolean
      example:
        

    UserNotificationList:
      type: array
      items:
        $ref: "#/components/schemas/UserNotification"
    
    UserHeartbeatStatus:
      type: object
      properties:
        userId:
          type: integer
        status:
          type: string
          enum:
            - none
            - monitoring
            - editing

    HeartbeatRes:
      type: object
      properties:
        userStatuses:
          type: array
          items:
            $ref: "#/components/schemas/UserHeartbeatStatus"
        channelId:
          type: integer


    NoContent:
      type: object
      example:

