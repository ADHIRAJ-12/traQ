openapi: 3.0.0
info:
  title: traQ-R API
  version: 0.0.1
servers:
  - url: https://q.trap.jp/api/1.0
paths:
  /channels:
    post:
      tags:
        - channel
      description:
        チャンネルを作ります。
      requestBody: 
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: チャンネル名
                parent:
                  type: string
                  description: 親のチャンネルID
      responses:
        "200":
          description: 作成されたチャンネルのチャンネルオブジェクト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Channel"
    get:
      tags:
        - channel
      description: チャンネルのリストの取得
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelList"

  /channels/{channelId}:
    parameters:
      - name: channelId
        in: path
        required: true
        schema:
          type: string
        
    post:
      tags:
        - channel
      description: 指定のチャンネルにメッセージを投稿します
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  description: メッセージ本文
      responses:
        "300": 
          description: 投稿成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"

    put: 
      tags:
        - channel
      description: チャンネル名変更
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: チャンネル名
            example:
              name: random
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Channel"
    get:
      tags:
        - channel
      description: 対象チャンネルの子チャンネルの取得 or メッセージの取得
      responses:
        "204":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"

    delete:
      tags:
        - channel
      description: チャンネルの削除
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                confirm:
                  type: boolean
                  description: 確認したか
            example:
              confirm: true
      responses:
        "204":
          description: 削除の成功
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
            
    
  /channels/{channelId}/topics:
    parameters:
      - name: channelId
        in: path
        required: true
        schema:
          type: string
    get: 
      tags:
        - topics
      description: チャンネルの説明の取得
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelTopic"

    post: 
      tags:
        - topics
      description: チャンネルの説明の追加
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
            example:
              text: なんでも良いチャンネルです
      responses:
        "201":
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelTopic"
    put: 
      tags:
        - topics
      description: チャンネルの説明の変更
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
            example:
              text: なんでも良いチャンネルです
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelTopic"

  /channels/{chnnelId}/messages:
    parameters:
      - name: channelId
        in: path
        required: true
        schema:
          type: string
    get: 
      tags:
        - message
      description: チャンネルに存在するメッセージの取得
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                count:
                  description: 取得する件数 1-200
                  type: integer
                offset:
                  description: 取得するメッセージのオフセット
                  type: integer
            example:
              count: 50
              offset: 150
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageList"
              
  /channels/{channelId}/notifications:
    parameters:
      - name: channelId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - channel
      description: チャンネルの通知状況(すべてのメンバーの状況を返す)
      responses: 
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotificationList"
    put: 
      tags:
        - channel
      description: チャンネルの通知状況の更新
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotificationList"
        
  /users:
    get:
      tags:
        - me
      description: ユーザーリストを取得
      responses:
        "200": 
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserList"

  /users/me:
    get:
      tags:
        - me
      description: 自分の情報を取得
      responses:
        "200": 
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    
  /users/me/clips:
    get:
      tags:
        - me
      description: クリップしたメッセージリストを取得
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageList"
    post:
      tags:
        - me
      description: 新しくメッセージをクリップ
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                message_id:
                  type: string
                  description: クリップするメッセージID
            example:
              message_id: 114514
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageList"
          
    delete:
      tags:
        - me
      description: クリップを削除
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                message_id:
                  type: string
                  description: 削除するメッセージのID
            example:
              message_id: 114514
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageList"
        "400":
          description: 指定されたメッセージIDがクリップされていなかった時
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageList"
    
  /users/me/stars:
    get:
      tags:
        - channel
      description: お気に入りチャンネルリストを取得
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelList"
    post:
      tags:
        - channel
      description: お気に入りチャンネルリストに追加
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                channel_id:
                  type: string
            example:
              channelId: 25
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelList"

  /users/me/stars/{channelId}:
    parameters:
      - name: channelId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags:
        - channel
      description: お気に入りチャンネルリストから削除
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelList"
        "404":
          description: お気に入りチャンネルリストになかった時
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelList"
    
  /users/me/channels/visibility:
    get:
      tags:
        - channel
      description: チャンネル一覧の可視状態を取得
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelList"
    put: 
      tags:
        - channel
      description: 可視状態の変更
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
            example:
              - 12
              - 14
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelList"
  
  /users/me/messages/unread:
    get:
      tags:
        - message
      description: 未読メッセージリストを取得
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
    delete:
      tags:
        - message
      description: メッセージを既読にする
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
    
  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema: 
          type: string
    get:
      tags:
        - user
      description: ユーザーの詳細を取得
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
    
  /users/{userId}/tags:
    parameters:
      - name: userId
        in: path
        required: true
        schema: 
          type: string
    get:
      tags:
        - userTag
      description: タグのリストを取得
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
    post:
      tags:
        - userTag
      description: タグを追加
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"

  /users/{userId}/tags/{tagId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema: 
          type: string
      - name: tagId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags:
        - userTag
      description: タグを削除
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
    
  /stamps:
    get:
      tags: 
        - stamp
      description: スタンプのリストを取得
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
    post:
      tags: 
        - stamp
      description: スタンプを追加
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
    
  /stamps/{stampId}:
    parameters:
      - name: stampId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: 
        - stamp
      description: スタンプの詳細を取得
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
    delete:
      description: スタンプを削除
      tags: 
        - stamp
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"

  /messages/{messageId}:
    parameters:
    - name: messageId
      in: path
      required: true
      description: 操作の対象となるメッセージID
      schema:
        type: integer
    put:
      tags:
        - message
      description: メッセージの編集
      operationId: editMessageById
      responses:
        "200":
          description: ok
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
    get:
      tags:
        - message
      description: メッセージの取得
      operationId: getMessageById
      responses:
        "200":
          description: the message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
    delete: 
      tags:
        - message
      description: メッセージの削除
      responses:
        "204":
          description: 削除の成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
          
  /messages/{messageId}/stamps:
    post:
      tags:
        - stamp
      description: スタンプを押す
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Stamp"
      responses:
        "204":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
              
  /messages/{messageId}/stamps/{stampId}:
    delete:
      tags:
        - stamp
      description: スタンプの削除
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Stamp"
      responses:
        "204":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"

  /messages/{messageId}/fixation:
    parameters:
    - name: messageId
      in: path
      required: true
      description: 操作の対象となるメッセージID
      schema:
        type: integer
    put:
      tags:
        - message
      description: "メッセージを固定する"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
    delete:
      tags:
        - message
      description: "固定したメッセージを外す"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"

  /messages/search/{query}:
    parameters:
      - name: query
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - search
      description: クエリに従った検索結果を取得
      responses:
        "200":
          description: result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageList"
  

components:
  schemas:
    Channel:
      type: object
      properties:
        channelId:
          type: string
        name:
          type: string
        parent:
          type: string
          description: 親の階層のチャンネルId
        children:
          type: array
          description: 子のチャンネルIdの配列
        visibility:
          type: boolean
          description: チャンネルの可視状態

    ChannelTopic:
      type: object
      properties:
        channelId:
          type: string
        name:
          type: string
        text:
          type: string

    ChannelList:
      type: array
      items: 
        $ref: "#/components/schemas/Channel"

    User:
      type: object
      properties:
        userId:
          type: string
        name:
          type: string

    UserDetail:
      type: object
      properties: 
        userId:
          type: string
        name:
          type: string
        tagList:
          type: array
          items:
            type: string
        
    UserList:
      type: array
      items: 
        $ref: "#/components/schemas/User"

    Message:
      type: object
      properties:
        messageId:
          type: integer
        user:
          type: object
        parentChannelId:
          type: integer
        fixation:
          type: boolean
        content:
          type: string
        dateTime:
          type: string
          format: date-time
        stampList:
          type: array
          items:
            $ref: "#/components/schemas/Stamp"

    MessageList:
      type: array
      items:
        $ref: "#/components/schemas/Message"

    Stamp:
      type: object
      properties:
         stampId:
          type: integer
         count:
          type: integer
         url:
          type: string

    StampList:
      type: array
      items: 
        $ref: "#/components/schemas/Stamp"

    UserNotification:
      type: object
      properties: 
         userId:
          type: string
         name:
          type: string
         notification:
          type: boolean

    UserNotificationList:
      type: array
      items:
        $ref: "#/components/schemas/UserNotification"
      
    NoContent:
      type: object
      example:

