version: 2.1

executors:
  default:
    docker:
      - image: circleci/golang:1.11.5
        environment:
          - GO111MODULE: "on"
          - GOCACHE: "/tmp/go/cache"
    working_directory: ~/workspace

commands:
  restore_mod:
    steps:
      - restore_cache:
          keys:
            - gomod-{{ checksum "go.mod" }}
  restore_build_cache:
    steps:
      - restore_cache:
          keys:
            - build-cache-{{ .Branch }}--
            - build-cache-master--

jobs:
  gomod:
    executor: default
    steps:
      - checkout
      - restore_mod
      - run:
          when: always
          command: go mod download
      - save_cache:
          key: gomod-{{ checksum "go.mod" }}
          when: always
          paths:
            - /go/pkg/mod/cache

  lint:
    executor: default
    steps:
      - checkout
      - restore_mod
      - run:
          name: Install golangci-lint v1.13.2
          command: curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sh -s v1.13.2
      - run: ./bin/golangci-lint run

  build:
    executor: default
    steps:
      - checkout
      - restore_mod
      - restore_build_cache
      - run:
          name: build
          when: always
          command: |
            mkdir -p $GOCACHE
            go build -v
      - save_cache:
          key: build-cache-{{ .Branch }}--{{ .Revision }}
          when: always
          paths:
            - /tmp/go/cache
      - store_artifacts:
          path: ~/workspace/traQ
          destination: traQ

  test:
    docker:
      - image: circleci/golang:1.11.5
        environment:
          - GO111MODULE: "on"
          - GOCACHE: "/tmp/go/cache"
          - IMAGEMAGICK_EXEC: "/usr/bin/convert"
      - image: circleci/mysql:latest-ram
        environment:
          - MYSQL_DATABASE: "traq"
          - MYSQL_ROOT_PASSWORD: "password"
    working_directory: ~/workspace
    steps:
      - run:
          name: install imagemagick
          command: sudo apt-get update && sudo apt-get install -y imagemagick
      - checkout
      - restore_mod
      - restore_build_cache
      - run:
          name: Setup DB
          command: |
            dockerize -wait tcp://localhost:3306 -timeout 1m
            go run .circleci/init.go
      - run:
          name: test
          command: go test ./... -covermode=atomic -coverprofile=coverage.txt -race -vet=off
      - run:
          name: Upload coverage data
          command: bash <(curl -s https://codecov.io/bash)

  build-image:
    machine: true
    steps:
      - checkout
      - restore_cache:
          keys:
            - docker-cache--{{ checksum ".circleci/config.yml" }}-{{ checksum "Dockerfile" }}
          paths: ~/caches/images.tar
      - run:
          name: docker load cache
          command: |
            if [ -f ~/caches/images.tar ]; then
              docker load -i ~/caches/images.tar
            fi
      - run:
          name: docker login
          command: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run:
          name: docker build
          command: |
            if [ -n "$CIRCLE_TAG" ]; then
              IMAGE_TAG="$CIRCLE_TAG"
            elif [ "$CIRCLE_BRANCH" = "master" ]; then
              IMAGE_TAG="latest"
            else
              IMAGE_TAG="$CIRCLE_BRANCH"
            fi
            docker build -t trap/traq:$IMAGE_TAG .
      - run:
          name: docker save cache
          command: |
            mkdir -p ~/caches
            docker save $(docker images | awk 'NR>=2 && ! /^<none>/{print $1}') -o ~/caches/images.tar
      - save_cache:
          key: docker-cache--{{ checksum ".circleci/config.yml" }}-{{ checksum "Dockerfile" }}
          paths: ~/caches/images.tar

  deploy-staging:
    executor: default
    steps:
      - checkout
      - run:
          name: deploy staging environment
          command: GO111MODULE=off go run .circleci/deploy_staging.go

workflows:
  version: 2
  main:
    jobs:
      - gomod
      - lint:
          requires:
            - gomod
      - build:
          requires:
            - gomod
      - test:
          requires:
            - build
      - deploy-staging:
          requires:
            - test
            - lint
          filters:
            branches:
              only: master
      - build-image
