// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package service

import (
	"github.com/google/wire"
	"github.com/leandro-lugaresi/hub"
	"github.com/traPtitech/traQ/repository"
	"github.com/traPtitech/traQ/service/bot"
	"github.com/traPtitech/traQ/service/counter"
	"github.com/traPtitech/traQ/service/fcm"
	"github.com/traPtitech/traQ/service/heartbeat"
	"github.com/traPtitech/traQ/service/imaging"
	"github.com/traPtitech/traQ/service/notification"
	"github.com/traPtitech/traQ/service/sse"
	"github.com/traPtitech/traQ/service/variable"
	"github.com/traPtitech/traQ/service/viewer"
	"github.com/traPtitech/traQ/service/webrtcv3"
	"github.com/traPtitech/traQ/service/ws"
	"go.uber.org/zap"
)

// Injectors from services_wire.go:

func newServices(hub2 *hub.Hub, repo repository.Repository, fcm2 *fcm.Client, logger *zap.Logger, origin variable.ServerOriginString, imgConfig imaging.Config) *Services {
	processor := bot.NewProcessor(repo, hub2, logger)
	onlineCounter := counter.NewOnlineCounter(hub2)
	manager := viewer.NewManager(hub2)
	heartbeatManager := heartbeat.NewManager(manager)
	imagingProcessor := imaging.NewProcessor(imgConfig)
	streamer := sse.NewStreamer(hub2)
	webrtcv3Manager := webrtcv3.NewManager(hub2)
	wsStreamer := ws.NewStreamer(hub2, manager, webrtcv3Manager, logger)
	service := notification.NewService(repo, hub2, logger, fcm2, streamer, wsStreamer, manager, origin)
	services := &Services{
		BOT:           processor,
		OnlineCounter: onlineCounter,
		FCM:           fcm2,
		HeartBeats:    heartbeatManager,
		Imaging:       imagingProcessor,
		SSE:           streamer,
		ViewerManager: manager,
		WebRTCv3:      webrtcv3Manager,
		WS:            wsStreamer,
		Notification:  service,
	}
	return services
}

// services_wire.go:

var ProviderSet = wire.NewSet(wire.FieldsOf(new(*Services),
	"BOT",
	"OnlineCounter",
	"FCM",
	"HeartBeats",
	"Imaging",
	"SSE",
	"ViewerManager",
	"WebRTCv3",
	"WS",
	"Notification",
))
