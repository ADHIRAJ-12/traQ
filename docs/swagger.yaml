openapi: 3.0.0

info:
  title: traQ API
  version: 0.0.1

servers:
  - url: /api/1.0

paths:
  /logout:
    post:
      tags:
        - authorization
      description: ログアウトを行います。
      responses:
        "204":
          description: |+
            正常にログアウトできました。

  /channels:
    post:
      tags:
        - channel
      description: チャンネルを作成します。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - type
              properties:
                type:
                  type: string
                  description: private or public
                member:
                  type: array
                  items:
                    type: string
                    format: uuid
                    description: |+
                      チャンネルに参加させるuserのuserId
                      publicの場合は初期状態の通知ONのユーザーとなります
                name:
                  type: string
                  description: チャンネル名 privateの場合は無視されます
                  example: random
                parent:
                  type: string
                  format: uuid
                  description: 親のチャンネルID privateの場合は無視されます
                  example: xxxxxxxx-xxxx-xxxx-Nxxx-xxxxxxxxxxxx
      responses:
        "201":
          description: |+
            正常にチャンネルが作成できました。
            作成されたチャンネルを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Channel"
        "400":
          description: |+
            正常にチャンネルが作成できませんでした。
            親チャンネルが存在しない又は指定されたタイプに対して適切なプロパティが存在しません。
    get:
      tags:
        - channel
      description: |+
        (すべての)チャンネルのリストを取得します。
      responses:
        "200":
          description: |+
            正常に取得できました。
            チャンネルの配列を返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelList"

  /channels/{channelID}:
    parameters:
      - $ref: "#/components/parameters/channelIdInPath"
    get:
      tags:
        - channel
      description: チャンネルの情報を返します。
      responses:
        "200":
          description: |+
            正常に取得ができました。
            チャンネルを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Channel"
        "404":
          description: |+
            取得に失敗しました。
            指定したチャンネルは存在しません。
    put:
      tags:
        - channel
      description: チャンネルの情報を変更します。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: チャンネル名
                  example: gps
                parent:
                  type: string
                  format: uuid
                  description: 変更後の親のID。
                  example: xxxxxxxx-xxxx-xxxx-Nxxx-xxxxxxxxxxxx
                visibility:
                  type: boolean
                  description: 変更後のvisibility
                  example: true
      responses:
        "200":
          description: |+
            正常に変更ができました。
            変更後のチャンネルを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Channel"
        "404":
          description: |+
            変更に失敗しました。
            指定したチャンネルは存在しません。
    delete:
      tags:
        - channel
      description: チャンネルを削除します。
      responses:
        "204":
          description: 削除に成功しました。
        "404":
          description: |+
            削除に失敗しました。
            指定したチャンネルは既に存在しません。

  /channels/{channelID}/topic:
    parameters:
      - $ref: "#/components/parameters/channelIdInPath"
    get:
      tags:
        - topic
      description: チャンネルの説明を取得します。
      responses:
        "200":
          description: |+
            正常に取得ができました。
            チャンネルトピックを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelTopic"
        "404":
          description: |+
            取得に失敗しました。
            指定したチャンネルは存在しません。
    put:
      tags:
        - topic
      description: チャンネルの説明を変更します。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  description: チャンネルの説明
                  example: なんでも良いチャンネルです!!
      responses:
        "200":
          description: |+
            正常に更新できました。
            更新後のチャンネルトピックを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelTopic"
        "404":
          description: |+
            更新に失敗しました。
            指定したチャンネルは存在しません。

  /channels/{channelID}/messages:
    parameters:
      - $ref: "#/components/parameters/channelIdInPath"
    get:
      tags:
        - message
      description: チャンネルに存在するメッセージを取得します。
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: 取得する件数 1-200
          example: 50
        - in: query
          name: offset
          schema:
            type: integer
          description: 取得するメッセージのオフセット
          example: 150
      responses:
        "200":
          description: |+
            正常に取得ができました。
            メッセージの配列を返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageList"
        "404":
          description: |+
            取得に失敗しました。
            指定したチャンネルは存在しません。
    post:
      tags:
        - message
      description: チャンネルにメッセージを投稿します。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  description: Markdown形式のメッセージ本文
                  example: Raskって誰？
      responses:
        "201":
          description: |+
            投稿に成功しました。
            投稿されたメッセージが返されます。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "404":
          description: |+
            投稿に失敗しました。
            指定したチャンネルは存在しません。

  /channels/{channelID}/pin:
    parameters:
      - $ref: "#/components/parameters/channelIdInPath"
    get:
      tags:
        - pin
      description: チャンネルのピン留め一覧を取得します。
      responses:
        "200":
          description: |+
            正常に取得できました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PinList"
    post:
      tags:
        - pin
      description: チャンネルにメッセージをピン留めします。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - messageId
              properties:
                messageId:
                  type: string
                  format: uuid
                  description: ピン留めするメッセージID
      responses:
        "201":
          description: |+
            正常にピン留めできました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pin"

  /pin/{pinID}:
    parameters:
      - $ref: "#/components/parameters/pinIdInPath"
    get:
      tags:
        - pin
      description: ピン留めを取得します。
      responses:
        "200":
          description: |+
            正常に取得できました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pin"
    delete:
      tags:
        - pin
      description: ピン留めを外します。
      responses:
        "204":
          description: |+
            正常に外せました。
        "404":
          description: |+
            指定したIDのピンは存在しません。

  /channels/{channelID}/notifications:
    parameters:
      - $ref: "#/components/parameters/channelIdInPath"
    get:
      tags:
        - notification
      description: 全ユーザーの通知状況を取得します。
      responses:
        "200":
          description: |+
            正常に取得できました。
            ユーザー通知状況の配列を返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotificationList"
        "404":
          description: |+
            取得に失敗しました。
            指定したチャンネルは存在しません。
    put:
      tags:
        - notification
      description: |+
        チャンネルの通知状況を変更します。
        リクエストに含めなかったユーザーIDのユーザーの通知状況は変更しません。
        また、存在しないユーザーのIDを指定した場合は無視されます。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                on:
                  description: 通知をつける人のユーザーIDの配列
                  type: array
                  items:
                    type: string
                    format: uuid
                off:
                  description: 通知をつけない人のユーザーIDの配列
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        "200":
          description: |+
            正常に更新できました。
            ユーザー通知状況の配列を返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserNotificationList"
        "404":
          description: |+
            変更に失敗しました。
            指定したチャンネルは存在しません。

  /users:
    get:
      tags:
        - user
      description: 全ユーザーのリストを取得します。
      responses:
        "200":
          description: |+
            正常に取得できました。
            ユーザーリストを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserList"
    post:
      tags:
        - user
      description: ユーザー登録します
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  description: ユーザー名(半角英数字とアンダーバー(_)の1文字以上32文字以下)
                email:
                  type: string
                  format: email
                  description: メールアドレス
                password:
                  type: string
                  format: password
                  description: パスワード
      responses:
        "201":
          description: 正常に登録できました。
        "400":
          description: 登録できませんでした。リクエスト内容が不正です。
        "403":
          description: 登録できませんでした。権限がありません。

  /users/me:
    get:
      tags:
        - user
      description: 自分のユーザー情報を取得します。
      responses:
        "200":
          description: |+
            正常に取得できました。
            自分のユーザーオブジェクトを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    patch:
      tags:
        - user
      description: 自分のユーザー情報を変更します。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                displayName:
                  type: string
                  description: 新しい表示名(0-32文字)
      responses:
        "204":
          description: 正常に変更できました。
        "400":
          description: 正常に変更できませんでした。リクエスト内容が不正です。

  /users/me/icon:
    get:
      tags:
        - user
      description: 自分のアイコン画像を取得します。
      responses:
        "200":
          description: 正常に取得できました。
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
            image/gif:
              schema:
                type: string
                format: binary
            image/svg+xml:
              schema:
                type: string
                format: svg
    put:
      tags:
        - user
      description: 自分のアイコンを更新します。
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  type: string
                  format: binary
                  description: 1MBまでのpng, jpeg, gif, svg
            encoding:
              file:
                contentType: image/png, image/jpeg, image/gif, image/svg+xml
      responses:
        "200":
          description: 正常に更新できました。
        "400":
          description: 正常に更新できませんでした。不正なファイルです。

  /users/me/clips:
    get:
      tags:
        - clip
      description: クリップしたメッセージのリストを取得します。
      responses:
        "200":
          description: |+
            正常に取得できました。
            クリップしたメッセージのリストを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageList"
    post:
      tags:
        - clip
      description: 新しくメッセージをクリップします。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - messageId
              properties:
                messageId:
                  type: string
                  format: uuid
                  description: クリップするメッセージID
      responses:
        "204":
          description: 正常にクリップできました。
        "404":
          description: |+
            正常にクリップできませんでした。
            指定されたメッセージは存在しないか、自分のスコープ内にありません。
    delete:
      tags:
        - clip
      description: |+
        クリップを削除します。
        既にクリップされていないメッセージを指定した場合は無視されます(204)。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - messageId
              properties:
                messageId:
                  type: string
                  format: uuid
                  description: 削除するメッセージのID
      responses:
        "204":
          description: 正常に削除できました。

  /users/me/stars:
    get:
      tags:
        - star
      description: お気に入りチャンネルリストを取得します。
      responses:
        "200":
          description: |+
            正常に取得できました。
            お気に入りチャンネルリストを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelList"
    post:
      tags:
        - star
      description: お気に入りチャンネルリストにチャンネルを追加します。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - channelId
              properties:
                channelId:
                  type: string
                  format: uuid
                  description: 追加するチャンネルのID
      responses:
        "204":
          description: 正常に追加できました。
        "404":
          description: |+
            正常に追加できませんでした。
            対象のチャンネルが存在しません。
    delete:
      tags:
        - star
      description: |+
        お気に入りチャンネルリストから削除します。
        既にお気に入りチャンネルリストに無いチャンネルを指定した場合は無視されます(204)。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - channelId
              properties:
                channelId:
                  type: string
                  format: uuid
                  description: 削除するチャンネルのID
      responses:
        "204":
          description: 正常に削除されました。

  /users/me/channels/visibility:
    get:
      tags:
        - visibility
      description: チャンネル一覧の可視状態を取得します。
      responses:
        "200":
          description: |+
            正常に取得できました。
            可視状態を返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelVisibilities"
    put:
      tags:
        - visibility
      description: |+
        チャンネルの可視状態を変更します。
        リクエストで指定しなかったチャンネルの可視状態は変更されません。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                visible:
                  type: array
                  description: 可視にするチャンネルIDの配列
                  items:
                    type: string
                    format: uuid
                hidden:
                  type: array
                  description: 非表示にするチャンネルIDの配列
                  items:
                    type: string
                    format: uuid
      responses:
        "200":
          description: |+
            正常に変更できました。
            可視状態を返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelVisibilities"
        "404":
          description: |+
            正常に変更できませんでした。
            存在しないチャンネルが指定されています。

  /users/me/unread:
    get:
      tags:
        - unread
      description: 未読メッセージのリストを取得します。
      responses:
        "200":
          description: |+
            正常に取得できました。
            未読メッセージリストを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageList"
    delete:
      tags:
        - unread
      description: メッセージを既読にします。存在しないメッセージのIDを指定した場合は、無視されます。
      requestBody:
        content:
          application/json:
            schema:
              type: array
              description: 既読にするメッセージのIDの配列
              items:
                type: string
                format: uuid
      responses:
        "204":
          description: |+
            正常にメッセージを既読にできました。

  /users/{userID}:
    parameters:
      - $ref: "#/components/parameters/userIdInPath"
    get:
      tags:
        - user
      description: ユーザーの詳細を取得します。
      responses:
        "200":
          description: |+
            正常に取得できました。
            ユーザー情報を返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetail"
        "404":
          description: |+
            正常に取得できませんでした。
            指定したユーザーは存在しません。

  /users/{userID}/icon:
    parameters:
      - $ref: "#/components/parameters/userIdInPath"
    get:
      tags:
        - user
      description: ユーザーのアイコン画像を取得します。
      responses:
        "200":
          description: 正常に取得できました。
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
            image/gif:
              schema:
                type: string
                format: binary
            image/svg+xml:
              schema:
                type: string
                format: svg
        "404":
          description: |+
            正常に取得できませんでした。
            指定したユーザーは存在しません。

  /users/{userID}/tags:
    parameters:
      - $ref: "#/components/parameters/userIdInPath"
    get:
      tags:
        - userTag
      description: ユーザーのタグのリストを取得します。
      responses:
        "200":
          description: |+
            正常に取得できました。
            タグのリストを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagList"
        "404":
          description: |+
            正常に取得できませんでした。
            指定したユーザーは存在しません。
    post:
      tags:
        - userTag
      description: ユーザーにタグを追加します。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - tag
              properties:
                tag:
                  type: string
                  description: 追加するタグ
                  example: 山田太郎
      responses:
        "201":
          description: |+
            正常に追加できました。追加後のリストを返します
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagList"
        "400":
          description: |+
            正常に追加できませんでした。
            パラメータの形式が不正です。
        "404":
          description: |+
            正常に追加できませんでした。
            指定したユーザーは存在しません。

  /users/{userID}/tags/{tagID}:
    parameters:
      - $ref: "#/components/parameters/userIdInPath"
      - $ref: "#/components/parameters/tagIdInPath"
    put:
      tags:
        - userTag
      description: タグのロック、アンロックを変更します
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - tag
                - isLocked
              properties:
                isLocked:
                  type: boolean
                  description: lockするときはtrue,解除するときはfalse
                  example: true
      responses:
        "200":
          description: |+
            正常に変更できました。変更後のタグのリストを返します
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagList"
        "400":
          description: |+
            正常に変更できませんでした。
            パラメータの形式が不正です。
        "404":
          description: |+
            正常に変更できませんでした。
            指定したユーザー、もしくはタグは存在しません。
    delete:
      tags:
        - userTag
      description: ユーザーから指定したタグを削除します。既に存在しないタグを削除しようとした場合は無視されます(204)。
      responses:
        "204":
          description: |+
            正常に削除できました。
        "404":
          description: |+
            正常に削除できませんでした。
            指定したユーザーは存在しません。

  /tags:
    get:
      tags:
        - userTag
      description: 全タグリストを取得します。
      responses:
        "200":
          description: 正常に取得できました。
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    tagId:
                      type: string
                      format: uuid
                    tag:
                      type: string
                    users:
                      type: array
                      $ref: "#/components/schemas/UserList"

  /tags/{tagID}:
    get:
      tags:
        - userTag
      description: タグIDで指定されたタグの情報を取得します。
      responses:
        "200":
          description: 正常に取得できました。
          content:
            application/json:
              schema:
                type: object
                properties:
                  tagId:
                    type: string
                    format: uuid
                  tag:
                    type: string
                  users:
                    type: array
                    $ref: "#/components/schemas/UserList"
          "404":
            description: 正常に取得できませんでした。指定されたタグIDは存在しません


  /stamps:
    get:
      tags:
        - stamp
      description: 全スタンプのリストを取得します。
      responses:
        "200":
          description: 正常に取得できました。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Stamp"
    post:
      tags:
        - stamp
      description: スタンプを新規作成します。
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - name
                - file
              properties:
                name:
                  type: string
                  description: スタンプ名(半角英数字と-+_のみを含む32文字以内の文字列)
                file:
                  type: string
                  format: binary
                  description: 1MBまでのpng, jpeg, gif, svg
            encoding:
              file:
                contentType: image/png, image/jpeg, image/gif, image/svg+xml
      responses:
        "201":
          description: 正常にスタンプが作成されました。
        "400":
          description: 正常にスタンプが作成できませんでした。

  /stamps/{stampID}:
    parameters:
      - $ref: "#/components/parameters/stampIdInPath"
    get:
      description: スタンプの情報を取得します。
      tags:
        - stamp
      responses:
        "200":
          description: 正常に取得できました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stamp"
        "404":
          description: 取得できませんでした。指定されたスタンプは存在しません。
    patch:
      description: スタンプを修正します。
      tags:
        - stamp
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                name:
                  type: string
                  description: スタンプ名(半角英数字と-+_のみを含む32文字以内の文字列)
                file:
                  type: string
                  format: binary
                  description: 1MBまでのpng, jpeg, gif, svg
            encoding:
              file:
                contentType: image/png, image/jpeg, image/gif, image/svg+xml
      responses:
        "204":
          description: 正常に修正できました。
        "403":
          description: |+
            修正できませんでした。
            指定されたスタンプを修正する権限がありません。
        "404":
          description: |+
            修正できませんでした。
            指定されたスタンプは存在しません。
    delete:
      description: スタンプを削除します。
      tags:
        - stamp
      responses:
        "204":
          description: |+
            正常に削除できました。
        "403":
          description: |+
            削除できませんでした。
            指定されたスタンプを削除する権限がありません。
        "404":
          description: |+
            削除できませんでした。
            指定されたスタンプは存在しません。

  /files:
    post:
      tags:
        - file
      description: ファイルをアップロードします
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "201":
          description: |+
            正常にファイルが追加されました
            メタデータを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileInfo"

  /files/{fileID}:
    parameters:
      - $ref: "#/components/parameters/fileIdInPath"
    get:
      tags:
        - file
      description: 指定したファイルの中身を取得します。
      parameters:
        - name: dl
          description: ファイルをダウンロードする場合に1を指定する
          in: query
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: |+
            正常に取得できました。
            fileのbinaryを返します。
            application/octet-streamで返すことになっていますが、ファイルの形式によっては変わります。
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "404":
          description: |+
            取得できませんでした。
            指定されたスタンプは存在しません。
    delete:
      tags:
        - file
      description: 指定したメッセージを削除します。
      responses:
        "200":
          description: |+
            正常に削除できました。
        "403":
          description: |+
            削除できませんでした。
            指定されたファイルを削除する権限がありません。
        "404":
          description: |+
            削除できませんでした。
            指定されたファイルは存在しないか、自分のスコープ内にありません。

  /files/{fileID}/meta:
    parameters:
      - $ref: "#/components/parameters/fileIdInPath"
    get:
      tags:
        - file
      description: 指定したファイルのメタデータを取得します
      responses:
        "200":
          description: |+
            正常に取得できました。
            メタデータを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileInfo"
        "404":
          description: |+
            取得できませんでした。
            指定されたファイルは存在しません。

  /files/{fileID}/thumbnail:
    parameters:
      - $ref: "#/components/parameters/fileIdInPath"
    get:
      tags:
        - file
      description: 指定したファイルのサムネイルを取得します
      responses:
        "200":
          description: |+
            正常に取得できました。
            サムネイルを返します。
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
        "404":
          description: 取得できませんでした。サムネイルは存在しません。

  /messages/{messageID}:
    parameters:
      - $ref: "#/components/parameters/messageIdInPath"
    put:
      tags:
        - message
      description: 指定したメッセージを編集します。
      operationId: editMessageById
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  description: Markdown形式のメッセージ本文
                  example: Raskって誰？
      responses:
        "200":
          description: |+
            正常に編集できました。
            編集後のメッセージオブジェクトを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "403":
          description: |+
            編集できませんでした。
            指定されたメッセージを編集する権限がありません。
        "404":
          description: |+
            編集できませんでした。
            指定されたメッセージは存在しないか、自分のスコープ内にありません。
    get:
      tags:
        - message
      description: 指定したメッセージを取得します。
      operationId: getMessageById
      responses:
        "200":
          description: |+
            正常に取得できました。
            メッセージオブジェクトを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "404":
          description: |+
            取得できませんでした。
            指定されたメッセージは存在しないか、自分のスコープ内にありません。
    delete:
      tags:
        - message
      description: 指定したメッセージを削除します。
      responses:
        "204":
          description: |+
            正常に削除できました。
        "403":
          description: |+
            削除できませんでした。
            指定されたメッセージを削除する権限がありません。
        "404":
          description: |+
            削除できませんでした。
            指定されたメッセージは存在しないか、自分のスコープ内にありません。

  /messages/{messageID}/stamps:
    parameters:
      - $ref: "#/components/parameters/messageIdInPath"
    get:
      tags:
        - stamp
      description: 指定したメッセージに押されているスタンプを全て取得します。
      responses:
        "200":
          description: 正常に取得できました。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MessageStamp"
        "404":
          description: 取得できませんでした。指定したメッセージは存在しないか、自分のスコープ内にありません。

  /messages/{messageID}/stamps/{stampID}:
    parameters:
      - $ref: "#/components/parameters/messageIdInPath"
      - $ref: "#/components/parameters/stampIdInPath"
    post:
      tags:
        - stamp
      description: 指定したメッセージに指定したスタンプを押します。
      responses:
        "204":
          description: |+
            正常にスタンプを押すことができました。
        "400":
          description: |+
            スタンプを押すことができませんでした。
            指定されたスタンプは存在しません。
        "404":
          description: |+
            スタンプを押すことができませんでした。
            指定されたメッセージは存在しないか、自分のスコープ内にありません。
    delete:
      tags:
        - stamp
      description: 指定したメッセージから指定したスタンプを外します。
      responses:
        "204":
          description: |+
            正常にスタンプを外すことができました。
        "400":
          description: |+
            スタンプを外すことができませんでした。
            指定されたスタンプは存在しません。
        "404":
          description: |+
            スタンプを外すことができませんでした。
            指定されたメッセージは存在しないか、自分のスコープ内にありません。

  /messages/search:
    get:
      tags:
        - search
      description: クエリによってメッセージを検索し、その結果を取得します。
      parameters:
        - name: query
          description: 検索のクエリ文字列
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: |+
            正常に検索できました。
            検索結果に含まれたメッセージを返します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageList"
        "400":
          description: |+
            正常に検索できませんでした。
            クエリが不正です。

  /heartbeat:
    get:
      tags:
        - heartbeat
      description: チャンネルを現在見ている人・編集している人を取得します。
      parameters:
        - name: channelId
          in: query
          description: 現在いるチャンネルId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: |+
            正常に取得できました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HeartbeatRes"
    post:
      tags:
        - heartbeat
      description: どのチャンネルを見ているか・編集しているかを送信します。
      parameters:
      - name: status
        in: query
        description: editing,monitoring,noneでユーザーの状態を指定する
        required: true
        schema:
          type: string
          enum:
            - none
            - monitoring
            - editing
      - name: channelId
        in: query
        description: 現在いるチャンネルId
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "204":
          description: 正常に送信できました。

  /notification:
    get:
      tags:
        - notification
      description: 通知ストリーム(Server Sent Events)に接続します。
      responses:
        "200":
          description: 接続が完了しました。

  /notification/device:
    post:
      tags:
        - notification
      description: FCMデバイスを登録します。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: FCMのデバイストークン
                  example: bk3RNwTe3H0:CI2k_HHwgIpoDKCIZvvDMExUdFQ3P1
      responses:
        "201":
          description: 正常に登録できました。

  /webhooks:
    get:
      tags:
        - webhook
      description: 自分が作成したwebhookの一覧を取得します。
      responses:
        "200":
          description: 正常に取得できました。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Webhook"
    post:
      tags:
        - webhook
      description: webhookを作成します。
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - name
                - channelId
              properties:
                name:
                  type: string
                  description: webhookユーザーの表示名(32文字まで)
                description:
                  type: string
                  description: webhookの説明
                channelId:
                  type: string
                  format: uuid
                  description: デフォルトの投稿先チャンネル
                file:
                  type: string
                  format: binary
                  description: webhookユーザーのアイコン(1MBまでのpng, jpeg, gif, svg)
            encoding:
              file:
                contentType: image/png, image/jpeg, image/gif, image/svg+xml
          application/json:
            schema:
              type: object
              required:
                - name
                - channelId
              properties:
                name:
                  type: string
                  description: webhookユーザーの表示名(32文字まで)
                description:
                  type: string
                  description: webhookの説明
                channelId:
                  type: string
                  format: uuid
                  description: デフォルトの投稿先チャンネル
      responses:
        "201":
          description: 正常に作成できました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Webhook"
        "400":
          description: 作成できませんでした。リクエスト内容が不正です。
        "403":
          description: 作成できませんでした。権限がありません。
        "404":
          description: 作成できませんでした。指定したチャンネルは存在しません。

  /webhooks/{webhookID}:
    parameters:
      - $ref: "#/components/parameters/webhookIdInPath"
    get:
      tags:
        - webhook
      description: webhookの詳細を取得します。
      responses:
        "200":
          description: 正常に取得できました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Webhook"
        "403":
          description: 取得できませんでした。権限がありません。
        "404":
          description: 取得できませんでした。指定したwebhookは存在しません。
    patch:
      tags:
        - webhook
      description: webhookを修正します。
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                name:
                  type: string
                  description: webhookユーザーの表示名(32文字まで)
                description:
                  type: string
                  description: webhookの説明
                channelId:
                  type: string
                  format: uuid
                  description: デフォルトの投稿先チャンネル
                file:
                  type: string
                  format: binary
                  description: webhookユーザーのアイコン(1MBまでのpng, jpeg, gif, svg)
            encoding:
              file:
                contentType: image/png, image/jpeg, image/gif, image/svg+xml
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: webhookユーザーの表示名(32文字まで)
                description:
                  type: string
                  description: webhookの説明
                channelId:
                  type: string
                  format: uuid
                  description: デフォルトの投稿先チャンネル
      responses:
        "204":
          description: 正常に修正できました。
        "400":
          description: 修正できませんでした。リクエスト内容が不正です。
        "403":
          description: 削除できませんでした。権限がありません。
        "404":
          description: 修正できませんでした。指定したwebhookは存在しません。
    delete:
      tags:
        - webhook
      description: webhookを削除します。
      responses:
        "204":
          description: 正常に削除できました。
        "403":
          description: 削除できませんでした。権限がありません。
        "404":
          description: 削除できませんでした。指定したwebhookは存在しません。
    post:
      tags:
        - webhook
      description: webhookを送信します。
      requestBody:
        content:
          text/plain:
            schema:
              type: string
              description: メッセージ文字列
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  description: メッセージ文字列
                channelId:
                  type: string
                  format: uuid
                  description: 投稿先チャンネルID(無い場合は事前登録のデフォルト値が使われます)
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  description: メッセージ文字列
                channelId:
                  type: string
                  format: uuid
                  description: 投稿先チャンネルID(無い場合は事前登録のデフォルト値が使われます)
      responses:
        "204":
          description: 正常に送信できました。
        "400":
          description: 正常に送信できませんでした。リクエスト内容が不正です。
        "404":
          description: 正常に送信できませんでした。指定されたwebhookは存在しません。

  /webhooks/{webhookID}/github:
    parameters:
      - $ref: "#/components/parameters/webhookIdInPath"
    post:
      tags:
        - webhook
      description: Github-Compatibleなwebhookを送信します。
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        "204":
          description: 正常に送信できました。
        "400":
          description: 正常に送信できませんでした。リクエスト内容が不正です。
        "404":
          description: 正常に送信できませんでした。指定されたwebhookは存在しません。

components:
  parameters:
    channelIdInPath:
      name: channelID
      description: 操作の対象となるチャンネルのID
      in: path
      required: true
      schema:
        type: string
        format: uuid
    userIdInPath:
      name: userID
      description: 操作の対象となるユーザーID
      in: path
      required: true
      schema:
        type: string
        format: uuid
    messageIdInPath:
      name: messageID
      in: path
      required: true
      description: 操作の対象となるメッセージID
      schema:
        type: string
        format: uuid
    stampIdInPath:
      name: stampID
      description: 操作の対象となるスタンプID
      in: path
      required: true
      schema:
        type: string
        format: uuid
    tagIdInPath:
      name: tagID
      description: 操作の対象となるタグID
      in: path
      required: true
      schema:
        type: string
        format: uuid
    fileIdInPath:
      name: fileID
      description: 操作の対象となるファイルID
      in: path
      required: true
      schema:
        type: string
    pinIdInPath:
      name: pinID
      description: 操作の対象となるピン留めID
      in: path
      required: true
      schema:
        type: string
    webhookIdInPath:
      name: webhookID
      description: 操作の対象となるWebhookのID
      in: path
      required: true
      schema:
        type: string
        format: uuid
  schemas:
    Channel:
      type: object
      properties:
        channelId:
          type: string
          format: uuid
        name:
          type: string
        parent:
          type: string
          format: uuid
          description: 親の階層のチャンネルId
        children:
          type: array
          description: 子のチャンネルIdの配列
        visibility:
          type: boolean
          description: チャンネルの可視状態

    ChannelTopic:
      type: object
      properties:
        channelId:
          type: string
          format: uuid
        name:
          type: string
        text:
          type: string

    ChannelList:
      type: array
      items:
        $ref: "#/components/schemas/Channel"

    ChannelVisibilities:
      type: object
      properties:
        visible:
          type: array
          description: 可視状態のチャンネルIDの配列
          items:
            type: string
            format: uuid
          example:
            - xxxxxxxx-xxxx-xxxx-Nxxx-xxxxxxxxxxxx
            - xxxxxxxx-xxxx-xxxx-Nxxx-xxxxxxxxxxxx
        hidden:
          type: array
          description: 非表示状態のチャンネルIDの配列
          items:
            type: string
            format: uuid
          example:
            - xxxxxxxx-xxxx-xxxx-Nxxx-xxxxxxxxxxxx
            - xxxxxxxx-xxxx-xxxx-Nxxx-xxxxxxxxxxxx

    User:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        name:
          type: string
        displayName:
          type: string
        iconFileId:
          type: string
          format: uuid
        bot:
          type: boolean

    UserDetail:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        name:
          type: string
        displayName:
          type: string
        iconFileId:
          type: string
          format: uuid
        bot:
          type: boolean
        tagList:
          $ref: "#/components/schemas/TagList"

    Tag:
      type: object
      properties:
        tagId:
          type: string
          format: uuid
        tag:
          type: string
        isLocked:
          type: boolean

    TagList:
      type: array
      items:
        $ref: "#/components/schemas/Tag"

    UserList:
      type: array
      items:
        $ref: "#/components/schemas/User"

    Message:
      type: object
      properties:
        messageId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        parentChannelId:
          type: string
        pin:
          type: boolean
        content:
          type: string
        dateTime:
          type: string
          format: date-time
        stampList:
          type: array
          items:
            $ref: "#/components/schemas/MessageStamp"

    MessageList:
      type: array
      items:
        $ref: "#/components/schemas/Message"

    MessageStamp:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        stampId:
          type: string
          format: uuid
        count:
          type: integer

    Stamp:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        creatorId:
          type: string
          format: uuid
        fileId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: datetime
        updatedAt:
          type: string
          format: datetime

    FileInfo:
      type: object
      properties:
        fileId:
          type: string
          format: uuid
        name:
          type: string
        mime:
          type: string
        size:
          type: integer
        dateTime:
          type: string
          format: date-time
        hasThumb:
          type: boolean
        thumbWidth:
          type: integer
        thumbHeight:
          type: integer

    UnreadList:
      type: array
      items:
        type: object
        properties:
          channelId:
            type: string
            format: uuid
          count:
            type: integer

    Pin:
      type: object
      properties:
        pinId:
          type: string
          format: uuid
        channelId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        dateTime:
          type: string
          format: date-time
        message:
          $ref: "#/components/schemas/Message"

    PinList:
      type: array
      items:
        $ref: "#/components/schemas/Pin"

    UserNotification:
      type: object
      properties:
         userId:
          type: string
          format: uuid
         name:
          type: string
         notification:
          type: boolean
      example:

    UserNotificationList:
      type: array
      items:
        $ref: "#/components/schemas/UserNotification"

    UserHeartbeatStatus:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        status:
          type: string
          enum:
            - monitoring
            - editing
      example:
        userId: xxxxxxxx-xxxx-xxxx-Nxxx-xxxxxxxxxxxx
        status: monitoring

    HeartbeatRes:
      type: object
      properties:
        userStatuses:
          type: array
          items:
            $ref: "#/components/schemas/UserHeartbeatStatus"
        channelId:
          type: string
          format: uuid
      example:
        userStatuses:
          - userId: xxxxxxxx-xxxx-xxxx-Nxxx-xxxxxxxxxxxx
            status: monitoring
          - userId: xxxxxxxx-xxxx-xxxx-Nxxx-xxxxxxxxxxxx
            status: editing
        channelId: xxxxxxxx-xxxx-xxxx-Nxxx-xxxxxxxxxxxx

    Webhook:
      type: object
      properties:
        webhookId:
          type: string
          format: uuid
        botUserId:
          type: string
          format: uuid
        displayName:
          type: string
        description:
          type: string
        iconFileId:
          type: string
          format: uuid
        channelId:
          type: string
          format: uuid
        creatorId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: datetime
        updaterId:
          type: string
          format: uuid
        updatedAt:
          type: string
          format: datetime
